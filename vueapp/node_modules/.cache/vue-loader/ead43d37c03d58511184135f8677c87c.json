{"remainingRequest":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Desktop/freespeech/vueapp/src/views/TilePad.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/src/views/TilePad.vue","mtime":1581966085486},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {mapGetters} from 'vuex';\r\n\r\n// object to access the speechSynthesis API\r\nconst SPEECH_SYNTHESIS = window.speechSynthesis;\r\nconst VOICES = SPEECH_SYNTHESIS.getVoices();\r\n\r\nimport TileData from '../../../build.json';\r\nimport Tile from '@/components/TilePad/Tile';\r\nimport { isMobileOnly } from 'mobile-device-detect';\r\n\r\nexport default {\r\n    name: 'TilePad',\r\n    components: {\r\n        Tile\r\n    },\r\n    data() {\r\n        return {\r\n            tileData: TileData,\r\n            isMobileOnly,\r\n            voices: VOICES\r\n        };\r\n    },\r\n  computed: {\r\n      ...mapGetters(['selectedVoiceIndex']),\r\n      tilePadToDisplay: function(){\r\n        let routeParam = this.$route.params.layout\r\n        if(typeof routeParam === 'undefined'){\r\n          return this.tileData.home\r\n        }else{\r\n          return this.tileData[routeParam]\r\n        }\r\n      }\r\n  },\r\n  methods: {\r\n      speakText(textToSpeak){\r\n          let speechSynthesisUtterance = new SpeechSynthesisUtterance(textToSpeak);\r\n\r\n          speechSynthesisUtterance.voice = this.voices[this.selectedVoiceIndex];\r\n          SPEECH_SYNTHESIS.speak(speechSynthesisUtterance);\r\n\r\n      }\r\n  }\r\n};\r\n",{"version":3,"sources":["TilePad.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA","file":"TilePad.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <v-container\r\n    fluid\r\n    class=\"grey lighten-5 py-10\"\r\n    style=\"{text-align: center}\"\r\n  >\r\n    <v-row\r\n      dense\r\n      v-for=\"(row, index) in tilePadToDisplay\"\r\n      :key=\"index\"\r\n    >\r\n      <template v-for=\"(tile, tileIndex) in row\">\r\n        <v-col\r\n          :key=\"tileIndex\"\r\n          :cols=\"isMobileOnly ? 3 : 1\"\r\n          class=\"d-flex child-flex\"\r\n        >\r\n          <Tile\r\n            @speakText=\"speakText\"\r\n            :tile-data=\"tile\"\r\n          />\r\n        </v-col>\r\n      </template>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex';\r\n\r\n// object to access the speechSynthesis API\r\nconst SPEECH_SYNTHESIS = window.speechSynthesis;\r\nconst VOICES = SPEECH_SYNTHESIS.getVoices();\r\n\r\nimport TileData from '../../../build.json';\r\nimport Tile from '@/components/TilePad/Tile';\r\nimport { isMobileOnly } from 'mobile-device-detect';\r\n\r\nexport default {\r\n    name: 'TilePad',\r\n    components: {\r\n        Tile\r\n    },\r\n    data() {\r\n        return {\r\n            tileData: TileData,\r\n            isMobileOnly,\r\n            voices: VOICES\r\n        };\r\n    },\r\n  computed: {\r\n      ...mapGetters(['selectedVoiceIndex']),\r\n      tilePadToDisplay: function(){\r\n        let routeParam = this.$route.params.layout\r\n        if(typeof routeParam === 'undefined'){\r\n          return this.tileData.home\r\n        }else{\r\n          return this.tileData[routeParam]\r\n        }\r\n      }\r\n  },\r\n  methods: {\r\n      speakText(textToSpeak){\r\n          let speechSynthesisUtterance = new SpeechSynthesisUtterance(textToSpeak);\r\n\r\n          speechSynthesisUtterance.voice = this.voices[this.selectedVoiceIndex];\r\n          SPEECH_SYNTHESIS.speak(speechSynthesisUtterance);\r\n\r\n      }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"]}]}