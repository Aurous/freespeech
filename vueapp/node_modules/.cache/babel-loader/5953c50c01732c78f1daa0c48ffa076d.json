{"remainingRequest":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/babel-loader/lib/index.js!/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Desktop/freespeech/vueapp/src/views/TilePad.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/src/views/TilePad.vue","mtime":1581966085486},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/macbookpro/Desktop/freespeech/vueapp/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex'; // object to access the speechSynthesis API\n\nvar SPEECH_SYNTHESIS = window.speechSynthesis;\nvar VOICES = SPEECH_SYNTHESIS.getVoices();\nimport TileData from \"../../../build.json\";\nimport Tile from '@/components/TilePad/Tile';\nimport { isMobileOnly } from 'mobile-device-detect';\nexport default {\n  name: 'TilePad',\n  components: {\n    Tile: Tile\n  },\n  data: function data() {\n    return {\n      tileData: TileData,\n      isMobileOnly: isMobileOnly,\n      voices: VOICES\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['selectedVoiceIndex']), {\n    tilePadToDisplay: function tilePadToDisplay() {\n      var routeParam = this.$route.params.layout;\n\n      if (typeof routeParam === 'undefined') {\n        return this.tileData.home;\n      } else {\n        return this.tileData[routeParam];\n      }\n    }\n  }),\n  methods: {\n    speakText: function speakText(textToSpeak) {\n      var speechSynthesisUtterance = new SpeechSynthesisUtterance(textToSpeak);\n      speechSynthesisUtterance.voice = this.voices[this.selectedVoiceIndex];\n      SPEECH_SYNTHESIS.speak(speechSynthesisUtterance);\n    }\n  }\n};",{"version":3,"sources":["TilePad.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAAA,UAAA,QAAA,MAAA,C,CAEA;;AACA,IAAA,gBAAA,GAAA,MAAA,CAAA,eAAA;AACA,IAAA,MAAA,GAAA,gBAAA,CAAA,SAAA,EAAA;AAEA,OAAA,QAAA;AACA,OAAA,IAAA,MAAA,2BAAA;AACA,SAAA,YAAA,QAAA,sBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,SADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,IAAA,EAAA;AADA,GAFA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,YAAA,EAAA,YAFA;AAGA,MAAA,MAAA,EAAA;AAHA,KAAA;AAKA,GAXA;AAYA,EAAA,QAAA,oBACA,UAAA,CAAA,CAAA,oBAAA,CAAA,CADA;AAEA,IAAA,gBAAA,EAAA,4BAAA;AACA,UAAA,UAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,MAAA;;AACA,UAAA,OAAA,UAAA,KAAA,WAAA,EAAA;AACA,eAAA,KAAA,QAAA,CAAA,IAAA;AACA,OAFA,MAEA;AACA,eAAA,KAAA,QAAA,CAAA,UAAA,CAAA;AACA;AACA;AATA,IAZA;AAuBA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,WADA,EACA;AACA,UAAA,wBAAA,GAAA,IAAA,wBAAA,CAAA,WAAA,CAAA;AAEA,MAAA,wBAAA,CAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,kBAAA,CAAA;AACA,MAAA,gBAAA,CAAA,KAAA,CAAA,wBAAA;AAEA;AAPA;AAvBA,CAAA","sourcesContent":["<template>\r\n  <v-container\r\n    fluid\r\n    class=\"grey lighten-5 py-10\"\r\n    style=\"{text-align: center}\"\r\n  >\r\n    <v-row\r\n      dense\r\n      v-for=\"(row, index) in tilePadToDisplay\"\r\n      :key=\"index\"\r\n    >\r\n      <template v-for=\"(tile, tileIndex) in row\">\r\n        <v-col\r\n          :key=\"tileIndex\"\r\n          :cols=\"isMobileOnly ? 3 : 1\"\r\n          class=\"d-flex child-flex\"\r\n        >\r\n          <Tile\r\n            @speakText=\"speakText\"\r\n            :tile-data=\"tile\"\r\n          />\r\n        </v-col>\r\n      </template>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex';\r\n\r\n// object to access the speechSynthesis API\r\nconst SPEECH_SYNTHESIS = window.speechSynthesis;\r\nconst VOICES = SPEECH_SYNTHESIS.getVoices();\r\n\r\nimport TileData from '../../../build.json';\r\nimport Tile from '@/components/TilePad/Tile';\r\nimport { isMobileOnly } from 'mobile-device-detect';\r\n\r\nexport default {\r\n    name: 'TilePad',\r\n    components: {\r\n        Tile\r\n    },\r\n    data() {\r\n        return {\r\n            tileData: TileData,\r\n            isMobileOnly,\r\n            voices: VOICES\r\n        };\r\n    },\r\n  computed: {\r\n      ...mapGetters(['selectedVoiceIndex']),\r\n      tilePadToDisplay: function(){\r\n        let routeParam = this.$route.params.layout\r\n        if(typeof routeParam === 'undefined'){\r\n          return this.tileData.home\r\n        }else{\r\n          return this.tileData[routeParam]\r\n        }\r\n      }\r\n  },\r\n  methods: {\r\n      speakText(textToSpeak){\r\n          let speechSynthesisUtterance = new SpeechSynthesisUtterance(textToSpeak);\r\n\r\n          speechSynthesisUtterance.voice = this.voices[this.selectedVoiceIndex];\r\n          SPEECH_SYNTHESIS.speak(speechSynthesisUtterance);\r\n\r\n      }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"],"sourceRoot":"src/views"}]}