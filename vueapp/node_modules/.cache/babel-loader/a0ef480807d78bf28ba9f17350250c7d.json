{"remainingRequest":"/Users/macbookpro/Desktop/freespeech/node_modules/babel-loader/lib/index.js!/Users/macbookpro/Desktop/freespeech/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/macbookpro/Desktop/freespeech/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbookpro/Desktop/freespeech/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Desktop/freespeech/src/views/Settings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbookpro/Desktop/freespeech/src/views/Settings.vue","mtime":1581961923841},{"path":"/Users/macbookpro/Desktop/freespeech/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/macbookpro/Desktop/freespeech/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/freespeech/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/macbookpro/Desktop/freespeech/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nvar VOICES = window.speechSynthesis.getVoices();\nvar voiceOptions = VOICES.map(function (voice, index) {\n  return {\n    text: \"\".concat(voice.name, \" (\").concat(voice.lang, \")\"),\n    value: index\n  };\n}).sort(function (a, b) {\n  return a.text.localeCompare(b.text);\n});\nexport default {\n  name: \"Settings\",\n  data: function data() {\n    return {\n      dialog: true,\n      voiceOptions: voiceOptions,\n      voices: VOICES\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['settingsDialogVisibility']), {\n    selectedVoiceIndex: {\n      get: function get() {\n        var voiceIndex = this.$store.state.selectedVoiceIndex;\n        return voiceOptions.filter(function (x) {\n          return x.value === voiceIndex;\n        })[0];\n      },\n      set: function set(value) {\n        this.setselectedVoiceIndex(value);\n      }\n    }\n  }),\n  methods: _objectSpread({}, mapActions(['setselectedVoiceIndex', 'toggleSettingsDialogVisibility']))\n};",{"version":3,"sources":["Settings.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AAEA,IAAA,MAAA,GAAA,MAAA,CAAA,eAAA,CAAA,SAAA,EAAA;AAEA,IAAA,YAAA,GAAA,MAAA,CAAA,GAAA,CAAA,UAAA,KAAA,EAAA,KAAA,EAAA;AACA,SAAA;AAAA,IAAA,IAAA,YAAA,KAAA,CAAA,IAAA,eAAA,KAAA,CAAA,IAAA,MAAA;AAAA,IAAA,KAAA,EAAA;AAAA,GAAA;AACA,CAFA,CAAA,CAEA,IAFA,CAEA,UAAA,CAAA,EAAA,CAAA;AAAA,SAAA,CAAA,CAAA,IAAA,CAAA,aAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AAAA,CAFA,CAAA;AAIA,eAAA;AAEA,EAAA,IAAA,EAAA,UAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,IADA;AAEA,MAAA,YAAA,EAAA,YAFA;AAGA,MAAA,MAAA,EAAA;AAHA,KAAA;AAKA,GATA;AAUA,EAAA,QAAA,oBACA,UAAA,CAAA,CAAA,0BAAA,CAAA,CADA;AAEA,IAAA,kBAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,YAAA,UAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,kBAAA;AACA,eAAA,YAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,KAAA,UAAA;AAAA,SAAA,EAAA,CAAA,CAAA;AACA,OAJA;AAKA,MAAA,GALA,eAKA,KALA,EAKA;AACA,aAAA,qBAAA,CAAA,KAAA;AACA;AAPA;AAFA,IAVA;AAsBA,EAAA,OAAA,oBACA,UAAA,CAAA,CAAA,uBAAA,EAAA,gCAAA,CAAA,CADA;AAtBA,CAAA","sourcesContent":["<template>\n  <v-dialog\n    v-model=\"settingsDialogVisibility\"\n    persistent\n    max-width=\"600px\"\n  >\n    <v-card>\n      <v-card-title>\n        <span class=\"headline\">Settings</span>\n      </v-card-title>\n      <v-card-text>\n        <v-container>\n          <v-row>\n            <v-col cols=\"12\">\n              <v-select\n                :items=\"voiceOptions\"\n                label=\"Voice\"\n                v-model=\"selectedVoiceIndex\"\n              />\n            </v-col>\n          </v-row>\n        </v-container>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer />\n        <v-btn\n          color=\"blue darken-1\"\n          text\n          @click=\"toggleSettingsDialogVisibility\"\n        >\n          Close\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport {mapActions, mapGetters} from 'vuex';\n\nconst VOICES = window.speechSynthesis.getVoices();\n\nlet voiceOptions = (VOICES.map((voice, index) => {\n    return {text: `${voice.name} (${voice.lang})`, value: index}\n})).sort((a,b) => a.text.localeCompare(b.text));\n\nexport default {\n    \n    name:\"Settings\",\n    data () {\n        return {\n        dialog: true,\n        voiceOptions,\n        voices: VOICES\n        }      \n    },\n    computed: {\n        ...mapGetters(['settingsDialogVisibility']),\n        selectedVoiceIndex: {\n            get(){\n                let voiceIndex = this.$store.state.selectedVoiceIndex;\n                return voiceOptions.filter(x => x.value === voiceIndex)[0];\n            },\n            set(value){            \n                this.setselectedVoiceIndex(value);\n            }\n        }  \n        },\n        methods: {\n            ...mapActions(['setselectedVoiceIndex','toggleSettingsDialogVisibility'])\n        }\n}\n</script>\n"],"sourceRoot":"src/views"}]}